<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="tutorial_security">
    <title>Protecting Assets - Adding Security</title>
    <para>
       To use the user in the webapp I had to put it in the session and add login and registration pages. Of course the pages that only worked with a valid user
account had to be secured as well.
</para><para>
I used Spring Security to that, writing a simple UserDetailsService that used my repository for looking up the users and validating their credentials. The config is located
in a separate applicationContext-security.xml.
    </para>
    <para>
        <programlisting language="xml" ><![CDATA[
<security:global-method-security secured-annotations="enabled">
    </security:global-method-security>

    <security:http auto-config="true" access-denied-page="/auth/denied"> <!-- use-expressions="true" -->
        <security:intercept-url pattern="/admin/*" access="ROLE_ADMIN"/>
        <security:intercept-url pattern="/import/*" access="ROLE_ADMIN"/>
        <security:intercept-url pattern="/user/*" access="ROLE_USER"/>
        <security:intercept-url pattern="/auth/login" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <security:intercept-url pattern="/auth/register" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <security:intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <security:form-login login-page="/auth/login" authentication-failure-url="/auth/login?login_error=true"
        default-target-url="/user"/>
        <security:logout logout-url="/auth/logout" logout-success-url="/" invalidate-session="true"/>
    </security:http>

    <security:authentication-manager>
        <security:authentication-provider user-service-ref="userDetailsService">
            <security:password-encoder hash="md5">
                <security:salt-source system-wide="cewuiqwzie"/>
            </security:password-encoder>
        </security:authentication-provider>
    </security:authentication-manager>

    <bean id="userDetailsService" class="org.neo4j.movies.service.CineastsUserDetailsService"/>        ]]></programlisting>
        <programlisting language="java" ><![CDATA[
@Service
public class CineastsUserDetailsService implements UserDetailsService, InitializingBean {

    @Autowired private FinderFactory finderFactory;
    private NodeFinder<User> userFinder;

    @Override
    public void afterPropertiesSet() throws Exception {
        userFinder = finderFactory.createNodeEntityFinder(User.class);
    }

    @Override
    public UserDetails loadUserByUsername(String login) throws UsernameNotFoundException, DataAccessException {
        final User user = findUser(login);
        if (user==null) throw new UsernameNotFoundException("Username not found",login);
        return new CineastsUserDetails(user);
    }

    public User findUser(String login) {
        return userFinder.findByPropertyValue("users","login",login);
    }
}

public class CineastsUserDetails implements UserDetails {
    private final User user;

    public CineastsUserDetails(User user) {
        this.user = user;
    }

    @Override
    public Collection<GrantedAuthority> getAuthorities() {
        User.Roles[] roles = user.getRoles();
        if (roles ==null) return Collections.emptyList();
        return Arrays.<GrantedAuthority>asList(roles);
    }

    @Override
    public String getPassword() {
        return user.getPassword();
    }

    @Override
    public String getUsername() {
        return user.getLogin();
    }

....
    public User getUser() {
        return user;
    }
}

        ]]></programlisting>
    </para>
    <para>
        After that a logged in user was available in the session and could so be used for all the social interactions. Most of the work done next was adding controller methods
and JSPs for the views.
    </para>
</chapter>
