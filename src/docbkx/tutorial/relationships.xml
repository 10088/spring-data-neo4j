<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.docbook.org/xml/4.4/docbookx.dtd">
<chapter id="tutorial_relationships">
    <title>A convincing act - Relationships</title>
    <section>
        <title>Value in Relationships - Creating them</title>
        <para>
            Next were relationships. Direct relationships didn't require any annotation. Unfortunately we had none of those, because ours had more semantics.
            So we went for the Role relationship between Movie and Actor.
            It had to be annotated with @RelationshipEntity and the @StartNode and @EndNode had to be marked. So our Role looked like this:
        </para>
        <para>
            <programlisting language="java"><![CDATA[
@RelationshipEntity
class Role {
    @StartNode Actor actor;
    @EndNode Movie movie;
    String role;
}
    ]]></programlisting>
        </para><para>
        When writing a test for that we tried to create the relationship entity with new, but got an exception saying that this is not allowed. This must be a strange restriction
about having only correctly constructed RelationshipEntities. To fix it, we had to recall the relateTo method from the introduced methods on the NodeEntities. After
checking it turned out to be exactly what we needed. We then added the method for connecting movies and actors to the actor - which seems a more natural fit.
        </para>
        <para>
            <programlisting language="java" ><![CDATA[
class Actor {
...
public Role playedIn(Movie movie, String roleName) {
    Role role = relateTo(movie, Role.class, "ACTS_IN");
    role.setRole(roleName);
    return role;
}}
            ]]></programlisting>
        </para>
    </section>
    <section>
        <title>Who's there ? - Accessing related entities</title>
        <para>
            What was left? Accessing those relationships. We already had the appropriate fields in both classes. Time to annotate them correctly. For the fields providing
access to the entities on the each side of the relationship this was straightforward. Providing the target type again (thanks to Java's type erasure) and the
relationship type (learned from the Neo4j lesson before) there was only the direction left. Which defaults to OUTGOING so only for the movie we had to
specify it.
        </para>
        <para>
            <programlisting language="java" ><![CDATA[
@NodeEntity
class Movie {
    @Indexed
    int id;
    String title;
    int year;
    @RelatedTo(elementClass = Actor.class, type = "ACTS_IN", direction = Direction.INCOMING)
    Set<Actor> cast;
}

@NodeEntity
class Actor {
    @Indexed
    int id;
    String name;
    @RelatedTo(elementClass = Movie.class, type = "ACTS_IN")
    Set<Movie> cast;

    public Role playedIn(Movie movie, String roleName) {
        Role role = relateTo(movie, Role.class, "ACTS_IN");
        role.setRole(roleName);
        return role;
    }
}
            ]]></programlisting>
        </para>
        <para>
            While reading about those relationship-sets we learned that they are handled by managed collections of Spring Data Graph. So whenever we add something to the
            set or remove it, it automatically reflects that in the underlying relationships. Neat. But this also meant we mustn't initialize the fields. Something we will
            certainly forget not to do in the future, so watch out for it.
        </para>
        <para>
            We made sure to add a test for those, so are assured that the collections worked as advertised (and also ran into the intialization problem above).
        </para>
    </section>
    <section>
        <title>May I introduce ? - Accessing Relationships themselves</title>
            <para>
            But we still couldn't access the Role relationships. There was more to read about this. For accessing the relationship in between the nodes there was a separate
            annotation @RelatedToVia. And we had to declare the field as readonly Iterable&lt;Role&gt;. That should make sure that we never tried to add Roles (which I couldn't create on my own anyway)
            to this field. Otherwise the annotation attributes were similar to those used for @RelatedTo. So off we went, creating our first real relationship (just kidding).
</para><para>
        <programlisting language="java" ><![CDATA[
@NodeEntity
class Movie {
    @Indexed
    int id;
    String title;
    int year;
    @RelatedTo(elementClass = Actor.class, type = "ACTS_IN", direction = Direction.INCOMING)
     Set<Actor> cast;

    @RelatedToVia(elementClass = Role.class, type = "ACTS_IN", direction = Direction.INCOMING)
    Iterable<Roles> roles;
}
        ]]></programlisting>
</para><para>
            After the tests proved that those relationship fields really mirrored the underlying relationships in the graph and instantly reflected additions and removals we were
            pretty satisfied with our domain.
        </para>
    </section>
</chapter>
