<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="tutorial:running">
    <title>Curtains Up! - Get it running</title>
    <section>
        <title>Requisites - Populating the database</title>
        <para>
            Time to put this on display. But I needed some test data first. So I wrote a small class for populating the database which could be called from my controller.
            To make it safe to call it several times I added index lookups to check for existing entries. A simple /populate endpoint for the controller that called it would
            be enough for now.
        </para>
        <para>
<programlisting language="java"><![CDATA[
            TODO code
]]></programlisting>
        </para>
    </section>
    <section>
        <title>Behind the scenes - Peeking at the Datastore</title>

        <section>
            <title>Eye candy - Neoclipse visualization</title>
            <para>
                After filling the database I wanted to see what the graph looked like. So I checked out two tools that are available for inspecting the graph. First Neoclipse, an
            eclipse RCP application or plugin that connects to existing graph stores and visualizes their content. After getting an exception about concurrent access, I learned
            that I have to use Neoclipse in readonly mode when my webapp had an active connection to the store. Good to know.
            </para><para>
            TODO neoclipse image
            </para>
        </section>
        <section>
            <title>Hardcore "Hacking" - Neo4j Shell</title>
            <para>
            Besides my movies and actors connected by ACTS_IN relationships there were some other nodes. The reference node which is kind of a root node in Neo4j and can be used
            to anchor subgraphs for easier access. And Spring Data Graph also represented the type hierarchy of my entities in the graph. Obviously for some internal housekeeping
            and type checking.
            </para><para>
            For us console junkies there is also a shell that can reach into a running neo4j store (if that one was started with enableRemoteShell) or provide readonly access
            to a graph store directory.
            </para><para>

            <programlisting language="shell" ><![CDATA[
            neo4j-shell -readonly -path /path/to/my/graphdb
            ]]></programlisting>
            </para><para>
            It uses some shell metaphors like cd and ls to navigate the graph. There are also more advanced commands like using indexes and traversals. I tried to play around with them
            in this shell sesson.
            </para><para>
            <programlisting language="shell" ><![CDATA[
            TODO shell session
            ]]></programlisting>
            </para>
        </section>
    </section>
</chapter>
