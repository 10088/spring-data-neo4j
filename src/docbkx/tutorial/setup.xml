<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.docbook.org/xml/4.4/docbookx.dtd">
<chapter id="tutorial_setup">
    <title>Scope: Spring</title>
    <para>
        Being Spring developers, we would, of course, choose components of the Spring Framework to do most of the work. We'd already come up with the ideas -
        that should be enough.
    </para><para>
        What database would fit both the complex network of cineasts, movies, actors, roles, ratings and friends? And also be able to support the
        recommendation algorithms that I thought of? I had no idea.
    </para><para>
    But, wait, there is the new Spring Data project, started in 2010,  which brings
        the convenience of the Spring programming model to NoSQL databases. That should fit our experience and help us to get started. We looked
        at the list of projects supporting the different NoSQL databases. Only one mentioned the kind of social network we were thinking of -
        Spring Data Graph for Neo4j, a graph database. Neo4j's pitch of "value in relationships" and the accompanying docs looked like what we needed.
        So we decided to give it a try.
    </para>
    <section>
        <title>Preparations - Required Setup</title>
        <para>
            To setup the project we created a public github account and began setting up the infrastructure for a spring web project using maven as build
            system. So we added the dependencies for the springframework libraries, put the web.xml for the DispatcherServlet and the applicationContext.xml
            in the webapp directory.
        </para><para>

        <example>
            <title>pom.xml</title>
            <programlisting language="xml"><![CDATA[
<properties>
    <spring.version>3.0.5.RELEASE</spring.version>
</properties>

<dependencies>
<dependency>
    <groupId>org.springframework</groupId>
    <!-- abbreviated for all the dependencies -->
    <artifactId>spring-(core,context,aop,aspects,tx,webmvc)</artifactId>
    <version>${spring.version}</version>
</dependency>
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-test</artifactId>
    <version>${spring.version}</version>
    <scope>test</scope>
</dependency>
</dependencies>

<build><plugins>
	<plugin>
		<groupId>org.mortbay.jetty</groupId>
		<artifactId>jetty-maven-plugin</artifactId>
		<version>7.1.2.v20100523</version>
		<configuration>
		   <webAppConfig>
		     <contextPath>/</contextPath>
		   </webAppConfig>
		   <!--scanIntervalSeconds>1</scanIntervalSeconds-->
		</configuration>
	</plugin>
</plugins></build>

            ]]></programlisting>
        </example>

        <example>
            <title>web.xml</title>
            <programlisting language="xml"><![CDATA[
<listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
</listener>

<servlet>
    <servlet-name>dispatcherServlet</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <load-on-startup>1</load-on-startup>
</servlet>

<servlet-mapping>
    <servlet-name>dispatcherServlet</servlet-name>
    <url-pattern>/</url-pattern>
</servlet-mapping>
        ]]></programlisting>
        </example>

    </para><para>
            With this setup we were ready for the first spike: creating a simple MovieController showing a static view. Check. Next was the setup for Spring Data Graph.
            We looked at the README at github and then checked it with the manual. Quite a lot of maven setup for aspectj but otherwise not so much to add.
            Time to add a few lines to our spring configuration.
    </para><para>


<example>
    <title>applicationContext.xml</title>
        <programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.0.xsd">

 <context:annotation-config/>
 <context:spring-configured/>
 <context:component-scan base-package="org.neo4j.cineasts">
     <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
 </context:component-scan>

 <tx:annotation-driven mode="aspectj"/>
</beans>
]]></programlisting>
</example>
<example>
    <title>dispatcherServlet-servlet.xml</title>
        <programlisting language="xml"><![CDATA[
<mvc:annotation-driven/>
<mvc:resources mapping="/images/**" location="/images/"/>
<mvc:resources mapping="/resources/**" location="/resources/"/>
<context:component-scan base-package="org.neo4j.cineasts.controller"/>

<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:prefix="/WEB-INF/views/" p:suffix=".jsp"/>

<tx:annotation-driven mode="aspectj"/>
]]></programlisting>
</example>

    </para><para>
            We spun up jetty to see if there were any obvious issues with the config. Check.
        </para>
    </section>
</chapter>
