<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<section id="reference:programming_model:relationships">
    <title>How to relate Node Entities using Relationships</title>
    <para>As relationships are first level citizens in Neo4j, associations between Node-Entities are represented by
    relationships. In general, relationships are categorized by a type and start and end-nodes (which also imply its direction).
        They can have an arbitrary number of properties. Spring Data Graph has special support to represent Neo4j relationships
        as Relationship Entities but this is not mandatory.
    </para>
    <section>
        <title>@RelatedTo: Connecting NodeEntities</title>
        <para>
            Every attribute of a Node Entity that refers to one or more Node Entity represents relationships and
            is handled by the field-aspects to be reflected in the graph.
        </para>
        <para>
            Those can either be single relationships (1:1) or multiple relationships (1:N).
            In most cases single relationships to other node entities don't have to be annotated, as Spring Data Graph
            can extract all necessary information
            from the field using reflection. In the case of multiple relationships, the <code>elementClass</code>
            parameter of @RelatedTo must be specified because of type erasure. The <code>direction</code>
            (default OUTGOING) and <code>type</code> (inferred from field name) parameters of the annotation are
            optional.
        </para>
        <para>
            Single Relationships to other node entities are created when setting the field (deleting previously set
            relationships) and deleted when setting it to null.
        </para>
        <para>
            References to a set of Node Entities are declared as fields with a <code>Set&lt;T&gt;</code> type, where T
            is a concrete Node-Entity. @RelatedTo is used again to provide information about type-name, elementClass and
            direction.
            It is not necessary to initialize the set as it is managed by Spring Data Graph, representing the relationships
            from (to) this entity with the given type. Adding and removing from the set is reflected on the graph.
        </para>
        <para>
            Spring Data Graph also ensures that there is only one relationship of the given type between two
            given entities.
        </para>
        <note>
            By setting direction to BOTH, relationships are created in the outgoing direction, but when the 1:N field
            is read, it will include relationships in both directions. A cardinality of M:N is not necessary because
            relationships can be navigated in both directions.
        </note>
<example>
    <title>Node Entity with Relationships</title>
    <programlisting language="java"><![CDATA[
@NodeEntity
public class Movie {
private Actor topActor;
}

@NodeEntity
public class Person {
@RelatedTo(type = "topActor", direction = Direction.INCOMING)
private Movie wasTopActorIn;
}

@NodeEntity
public class Actor {
@RelatedTo(type = "ACTS_IN", elementClass = Movie.class)
private Set<Movie> movies;
}
]]></programlisting>
</example>
        <para>
            Other means of handling relationships are the introduced <code>entity.getRelationshipTo(target,type)</code> and
            <code>entity.relateTo(target,type)</code> methods that are available on each NodeEntity. Those methods create
            and return Neo4j relationships. It is possible to remove relationships manually using
            <code>entity.removeRelationshipTo(target,type)</code>. For creating and accessing relationship-entities,
            their equivalents are available.
        </para>
    </section>

    <section>
        <title>@RelationshipEntity: Rich relationships</title>
        <para>
            To access the full data model of graph relationships, POJOs can also be annotated with
            @RelationshipEntity. Relationship entities can not be instantiated directly but are rather accessed via
            node entities, either by @RelatedToVia fields or by the introduced
            <code>entity.relateTo(target,relationshipClass,type)</code> and
            <code>entity.getRelationshipTo(target,relationshipClass,type)</code> methods
            (<xref linkend="reference:programming-model:introduced-methods"/>).
        </para><para>
            Relationship entities may contain fields that are mapped to simple properties and two special fields that are
            annotated with <code>@StartNode</code> and <code>@EndNode</code> which point to the start and end node entities respectively. These
            fields are treated as read only fields.
        </para>
<example>
    <title>Relationship Entity</title>
    <programlisting language="java"><![CDATA[
@RelationshipEntity
public class Role {
String title;

@StartNode private Actor actor;
@EndNode private Movie movie;
}
]]></programlisting>

</example>    </section>

    <section>
        <title>@RelatedToVia: Connecting Node Entitites via Relationship Entities</title>
        <para>
            To provide easy programmatic access to the richer relationship entities of the data model, a different
            annotation <code>@RelatedToVia</code> can be declared on fields of <code>Iterable</code>s of the relationship entity type.
            These Iterables then provide read only access to instances of the entity that backs the relationship of this
            relationship type. Those instances are initialized with the properties of the relationship and the start
            and end node.
        </para>
<example>
    <title>Using Relationship Entities and @RelatedToVia</title>
    <programlisting language="java"><![CDATA[
@NodeEntity
public class Actor {
@RelatedToVia(type = "ACTS_IN", elementClass = Role.class)
private Iterable<Role> roles;

public Role playedIn(Movie movie, String title) {
    Role role=relateTo(movie,Role.class,"ACTS_IN");
    role.setTitle(title);
    return role;
}
}
]]></programlisting>
</example>
    </section>
</section>