<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<section id="reference_programming-model:neo4jtemplate">
    <title>Neo4jTemplate</title>
    <para>
        The <code>Neo4jTemplate</code> offers the convenient API of Spring templates for the Neo4j graph database.
        There are methods for creating nodes and relationships that automatically set provided properties and optionally
        index certain fields. Other methods (<code>index</code>, <code>autoindex</code>) will index them.
    </para>
    <para>
        For the querying operations Neo4jTemplate unifies the result with the <code>Path</code> abstraction that
        comes from Neo4j. Much like a resultset a path contains <code>nodes()</code> and <code>relationships()</code>
        starting at a <code>startNode()</code> and ending with a<code>endNode()</code>, the
        <code>lastRelationship()</code> is also available separately. The <code>Path</code> abstraction also wraps
        results that contain just nodes or relationships. Using implementations of <code>PathMapper&lt;T&gt;</code>
        and <code>PathMapper.WithoutResult</code> (comparable with <code>RowMapper</code> and
        <code>RowCallbackHandler</code>) the paths can be converted to Java objects.
    </para>
    <para>
        Query methods either take a field / value combination to look for exact matches in the index or a lucene query
        object or string to handle more complex queries.
    </para>
    <para>
        Traversal methods are the bread and butter of graph operations. As such, they are fully supported in the
        <code>Neo4jTemplate</code>. The <code>traverseNext</code> method traverses to the direct neighbours of the
        start node filtering the relationships according to its parameters.
    </para>
    <para>
        The <code>traverse</code> method covers the full fledged traversal operation that takes a powerful
        <code>TraversalDescription</code> (most probably built from the <code>Traversal.description()</code>
        DSL) and runs it from the start node. Each path that is returned via the traversal is passed to the
        <code>PathMapper</code> to be processed accordingly.
    </para>
    <para>
        The <code>Neo4jTemplate</code> provides configurable implicit transactions for all its methods. By default
        it creates a transaction for each call (which is a no-op if there is already a transaction running). If
        you call the constructor with the <code>useExplicitTransactions</code> parameter set to true, it won't
        create any transactions so you have to provide them using @Transactional or the TransactionTemplate.
    </para>
    <programlisting language="java"><![CDATA[
Neo4jOperations neo = new Neo4jTemplate(grapDatabase);
Node michael = neo.createNode(_("name","Michael"),"name");
Node mark = neo.createNode(_("name","Mark"));
Node thomas = neo.createNode(_("name","Thomas"));
neo.createRelationship(mark,thomas, WORKS_WITH, _("project","spring-data"));
neo.index("devs",thomas, "name","Thomas");
neo.autoIndex("devs",mark, "name");
assert "Mark".equals(neo.query("devs","name","Mark",new NodeNamePathMapper()));
]]></programlisting>

</section>
