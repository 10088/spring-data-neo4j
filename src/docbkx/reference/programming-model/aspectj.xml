<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<section id="reference:aspectj">
    <title>AspectJ support</title>
    <para>
        Behind the scenes, Spring Data Graph leverages <ulink url="http://www.eclipse.org/aspectj/">AspectJ</ulink>
        aspects to modify the behavior of simple annotated POJO entities
        (see <xref linkend="reference:aspectj-details"/>). Each node entity is backed by a graph node that holds its
        properties and relationships to other entities. AspectJ is used for intercepting field access, so that
        Spring Data Graph can retrieve the information from the entity's backing node or relationship in the database.
    </para>
    <para>
        The aspect introduces some internal fields and some public methods
        (see <xref linkend="reference:programming-model:introduced-methods"/>) in the entities, such as
        <code>entity.getPersistentState()</code> and <code>entity.relateTo</code>.
        It also introduces repository methods like
        <code>find(Class&lt;? extends NodeEntity>, TraversalDescription)</code>,
        and <code>equals()</code> and <code>hashCode</code> delegation, making <code>equals()</code>
        honor the backing state.
    </para>
    <para>
        Spring Data Graph internally uses an abstraction called <code>EntityState</code> that the field
        access and instantiation advices of the aspect delegate to. This way, the aspect code is kept to a
        minimum, focusing mainly on the pointcuts and delegation code. The <code>EntityState</code> then uses
        a number of <code>FieldAccessorFactories</code> to create a <code>FieldAccessor</code> instance per
        field that does the specific handling needed for the concrete field type. There are various layers of
        caching involved as well, so it handles repeat instantiation efficiently.
    </para>
    <section>
        <title>AspectJ IDE support</title>
        <para>
            As Spring Data Graph uses some advanced features of AspectJ, users may experience issues with
            their IDE reporting errors where there in fact are none. Features that might be reported wrongfully
            include: introduction of methods to interfaces, declaration of additional interfaces for annotated
            classes, and generified introduced methods.
        </para>
        <para>
            IDE's not providing the full AJ support might mark parts of your code as errors.
            You should rely on your build-system and test to verify the correctness of the code. You might also have
            your Entities (or their interfaces) implement the <code>NodeBacked</code> and <code>RelationshipBacked</code>
            interfaces directly to benefit from completion support and error checking.
        </para>
        <para>
            Eclipse and STS support AspectJ via the AJDT plugin which can be installed from the update-site:
            <ulink url="http://download.eclipse.org/tools/ajdt/36/update/">http://download.eclipse.org/tools/ajdt/36/update/</ulink>
            (it might be necessary to use the latest development snapshot of the plugin
            <ulink url="http://download.eclipse.org/tools/ajdt/36/dev/update">http://download.eclipse.org/tools/ajdt/36/dev/update</ulink>).
            The current version that does not show incorrect errors is AspectJ 1.6.12.M1 (included in STS 2.7.0.M2), previous versions are reported
            to mislead the user.
        </para>
        <para>
            The AspectJ support in IntelliJ IDEA lacks some of the features. JetBrains is working on improving
            the situation in their upcoming 10.5 release of their popular IDE. Their latest work is available
            under their early access program (EAP). Building the project with the AspectJ compiler
            <code>ajc</code> works in IDEA (Options -> Compiler -> Java Compiler should show ajc). Make sure to
            give the compiler at least 512 MB of RAM.
        </para>
    </section>
</section>