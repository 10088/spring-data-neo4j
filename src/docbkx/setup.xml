<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="setup">
	<title>Setup required for Spring Data Graph</title>
	<para>To use DATAGRAPH in your application, some setup is required. For building the application the necessary Maven dependencies must be included and
		for the AspectJ weaving some extensions of the compile goal are necessary. This chapter also discusses the Spring configuration needed to set up
		DATAGRAPH. Examples for this setup can be found in the <ulink url="http://github.com/SpringSource/spring-data-graph-examples">DATAGRAPH examples</ulink>.
    </para>
	<section>
		<title>Maven Configuration</title>
		<para>
			As stated in the requirements chapter, DATAGRAPH projects are easiest to build with Apache Maven. The main dependencies are DATAGRAPH itself, Spring Data Commons, some parts of the Spring Framework and of course the Neo4j graph database.
		</para>
        <section>
		<title>Repositories</title>
            <para>
                The milestone releases of DATAGRAPH are available from the dedicated milestone repository. Neo4j
                releases and milestones are available from Maven Central.
            </para>
            <programlisting lang="XML"><![CDATA[
<repository>
  <id>spring-maven-milestone</id>
  <name>Springframework Maven Repository</name>
  <url>http://maven.springframework.org/milestone</url>
</repository>
				]]></programlisting>
            </section>
        <section>
		<title>Dependencies</title>
            <para>The dependency on <code>spring-data-neo4j</code>
                should transitively pull in Spring Framework (core, context, aop,
                aspects, tx), Aspectj, Neo4j and Spring Data Commons. If you already use these (or different versions of
                these) in your project, then include those dependencies on your own.
            </para>
		<programlisting lang="XML"><![CDATA[
<dependency>
  <groupId>org.springframework.data</groupId>
  <artifactId>spring-data-neo4j</artifactId>
  <version>1.0.0.M2</version>
</dependency> 

<dependency>
  <groupId>org.aspectj</groupId>
  <artifactId>aspectjrt</artifactId>
  <version>1.6.10.RELEASE</version>
</dependency>
						]]></programlisting>

        </section>
    <section>

		<title>AspectJ build configuration</title>
		<para>As DATAGRAPH uses AspectJ for build time aspect weaving of your entities, it is necessary to add the aspectj-plugin to the build phases. The plugin has its own dependencies. You also need to explicitely specifiy libraries containing aspects (spring-aspects and spring-data-neo4j)</para>
		<programlisting lang="XML"><![CDATA[
<plugin>
  <groupId>org.codehaus.mojo</groupId>
  <artifactId>aspectj-maven-plugin</artifactId>
  <version>1.0</version>
  <dependencies>
    <!-- NB: You must use Maven 2.0.9 or above or these are ignored (see MNG-2972) -->
    <dependency>
      <groupId>org.aspectj</groupId>
      <artifactId>aspectjrt</artifactId>
      <version>1.6.10.RELEASE</version>
    </dependency>
    <dependency>
      <groupId>org.aspectj</groupId>
      <artifactId>aspectjtools</artifactId>
      <version>1.6.10.RELEASE</version>
    </dependency>
  </dependencies>
  <executions>
    <execution>
      <goals>
        <goal>compile</goal>
        <goal>test-compile</goal>
      </goals>
    </execution>
  </executions>
  <configuration>
    <outxml>true</outxml>
    <aspectLibraries>
      <aspectLibrary>
        <groupId>org.springframework</groupId>
        <artifactId>spring-aspects</artifactId>
      </aspectLibrary>
      <aspectLibrary>
        <groupId>org.springframework.data</groupId>
        <artifactId>spring-datastore-neo4j</artifactId>
      </aspectLibrary>
    </aspectLibraries>
    <source>1.6</source>
    <target>1.6</target>
  </configuration>
</plugin>
						]]></programlisting>
    </section>
	</section>
	<section>
		<title>Setting Up Spring Data Graph - Spring Configuration</title>
		<para>The concrete configuration for Spring Data Graph is quite verbose as there is no autowiring involved. It sets up the following parts.
            <itemizedlist>
                <listitem>
                    <para>GraphDatabaseService, IndexManager for the embedded Neo4j storage engine</para>
                </listitem>
                <listitem>
                    <para>Spring transaction manager, Neo4j transaction manager</para>
                </listitem>
                <listitem>
                    <para>aspects and instantiators for node and relationship entities</para>
                </listitem>
                <listitem>
                    <para>EntityStateAccessors and FieldAccessFactories needed for the different field handling
                    </para>
                </listitem>
                <listitem>
                    <para>Conversion services</para>
                </listitem>
                <listitem>
                    <para>Finder factory</para>
                </listitem>
                <listitem>
                    <para>an appropriate NodeTypeStrategy</para>
                </listitem>
            </itemizedlist>

            </para>
        <section>
            <title>XML-Namespace</title>
            <para>
                To simplify the configuration we provide a xml namespace <code>datagraph</code> that allows configuration of any
                DATAGRAPH project with a single line of xml code. There are three possible parameters. You can use <code>storeDirectory</code>
                or the reference to <code>graphDatabaseService</code> alternatively. For cross-store configuration just refer
                to an <code>entityManagerFactory</code>.
            </para>
            <programlisting lang="XML"><![CDATA[
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:datagraph="http://www.springframework.org/schema/data/graph"
  xsi:schemaLocation="
    http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/data/graph 
    http://www.springframework.org/schema/data/graph/datagraph-1.0.xsd
    ">

    <context:annotation-config/>
    <datagraph:config storeDirectory="target/config-test"/>

</beans>
                    ]]></programlisting>
            <programlisting lang="XML"><![CDATA[
    <context:annotation-config/>

    <bean id="graphDatabaseService" class="org.neo4j.kernel.EmbeddedGraphDatabase" 
      destroy-method="shutdown">
         <constructor-arg index="0" value="target/config-test" />
    </bean>

    <datagraph:config graphDatabaseService="graphDatabaseService"/>
                    ]]></programlisting>

            <programlisting lang="XML"><![CDATA[
  <context:annotation-config/>

    <datagraph:config storeDirectory="target/config-test"
      entityManagerFactory="entityManagerFactory"/>

    <bean class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
      id="entityManagerFactory">
        <property name="dataSource" ref="dataSource"/>
        <property name="persistenceXmlLocation" value="classpath:META-INF/persistence.xml"/>
    </bean>
                    ]]></programlisting>
        </section>
        <section>
            <title>Java based Configuration</title>
            <para>
                That's why DATAGRAPH provides a Spring Java Config class (annotated with @Config) <code>Neo4jConfiguration</code> that takes care of all that. The only
                thing that must be provided in the custom Spring config is the <code>GraphDatabaseService</code> configured with a datastore directory.
    <programlisting lang="XML"><![CDATA[
    <beans>
    ...

        <tx:annotation-driven mode="aspectj" transaction-manager="transactionManager"/>
        <bean class="org.springframework.data.graph.neo4j.config.Neo4jConfiguration"/>

        <bean class="org.springframework.context.annotation.ConfigurationClassPostProcessor"/>

        <bean id="graphDatabaseService" class="org.neo4j.kernel.EmbeddedGraphDatabase"
              destroy-method="shutdown" scope="singleton">
            <constructor-arg index="0" value="target/config-test"/>
        </bean>
    ...
    </beans>
                ]]></programlisting>
                </para>
        </section>
	</section>
</chapter>
